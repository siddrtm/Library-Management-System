

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Map;

import org.apache.struts2.dispatcher.SessionMap;
import org.apache.struts2.interceptor.SessionAware;

import com.mysql.jdbc.StringUtils;
import com.opensymphony.xwork2.ActionSupport;

public class LoginAction extends ActionSupport implements SessionAware{



	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String username;
   private String password;
   private String name;
   private String type;

   private SessionMap<String,Object> sessionMap;  
   
   @SuppressWarnings("rawtypes")
@Override  
   public void setSession(Map<String, Object> map) {  
       sessionMap= (SessionMap) map;  
   }

 public void validate()
 {
	 if(StringUtils.isNullOrEmpty(getUsername()))
     {
         addFieldError("username", "UserId can't be blank");
     }
     if(StringUtils.isNullOrEmpty(getPassword()))
     {
         addFieldError("password","password can't be blank");
     }      
	 
 }
   
   
public String execute() {
      String ret = ERROR;
      Connection conn = null;
      

      try {
         String URL = "jdbc:mysql://localhost:3306/sepm";
         Class.forName("com.mysql.jdbc.Driver");
         conn = DriverManager.getConnection(URL, "root", "blankblank");
         String sql = "SELECT name,type,ID FROM customer WHERE";
         sql+=" username = ? AND password = ?";
         PreparedStatement ps = conn.prepareStatement(sql);
         ps.setString(1, username);
         ps.setString(2, password);
         ResultSet rs = ps.executeQuery();

         
         
         
         while (rs.next()) {
            name = rs.getString(1);
            type = rs.getString(2);
            ret = type;
            sessionMap.put("type", type);
            sessionMap.put("login", "true");
            System.out.println("AAAAAAA");
            sessionMap.put("userinfo", database.getUserInfo(rs.getString(3)));
            System.out.println("BBBBBB");
         }
      } catch (Exception e) {
         ret = ERROR;
         addFieldError("username","invalid username or password");
         return "input";
         
      } finally {
         if (conn != null) {
            try {
               conn.close();
            } catch (Exception e) {
            }
         }
      }
      
      return ret;
   }

public String logout(){  
	    if(sessionMap!=null){  
	        sessionMap.invalidate();  
	    }  
	    return "success";  
	}  
   public String getUsername() {
		return username;
	}


	public void setUsername(String username) {
		this.username = username;
	}
  
   public String getPassword() {
      return password;
   }

   public void setPassword(String password) {
      this.password = password;
   }

   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
   
   public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}
}