import java.sql.SQLException;
import java.util.Map;

import org.apache.struts2.dispatcher.SessionMap;
import org.apache.struts2.interceptor.SessionAware;

import com.opensymphony.xwork2.ActionSupport;


public class AddBook extends ActionSupport implements SessionAware{

	/**
	 * 
	 */
	private String b_id;
	private String title;
	private String year;
	private String publication;
	private String shelfNo;
	
	private String subject;
	private String language;
	private String author1;
	private String author2;
	private String author3;
	
	
	
	private static final long serialVersionUID = 1L;
	private SessionMap<String,Object> sessionMap;
	
	@Override
	public void setSession(Map<String, Object> map) {

		sessionMap= (SessionMap) map; 
		
	}
	
	public String execute(){
		if(getB_id().isEmpty()){
			addFieldError("b_id","Book ID is empty");
			return "input";
		}if(getTitle().isEmpty()){
			addFieldError("title","Title is empty");
			return "input";
		}if(getYear().isEmpty()){
			addFieldError("year","Year is empty");
			return "input";
		}if(getPublication().isEmpty()){
			addFieldError("publication","Publication is empty");
			return "input";
		}if(getShelfNo().isEmpty()){
			addFieldError("shelfNo","Shelf No is empty");
			return "input";
		}if(getSubject().isEmpty()){
			addFieldError("subject","Subject is empty");
			return "input";
		}if(getLanguage().isEmpty()){
			addFieldError("language","Language is empty");
			return "input";
		}if(getAuthor1().isEmpty() && getAuthor2().isEmpty() && getAuthor3().isEmpty()){
			addFieldError("author1","No author filled");
			return "input";
		}
		
		
		String query = "INSERT INTO book (b_id,title,year,publication,shelf_no,subject,language) VALUES ('" + getB_id()+ "','"+ getTitle() +"','"+ getYear() +"','"+ getPublication() +"','"+ getShelfNo() +"','"+ getSubject() +"','"+ getLanguage() +"'";
		
		try {
			database.update(query);
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("error in add book update");
			addFieldError("b_id","Could not update book");
			return "input";
			
		}
		if(!getAuthor1().isEmpty()){
			query == "INSERT INTO author (b_id,name) VALUES ('"+ getB_id() +"','"+ getAuthor1() +"')";
		}
	}
	

	public String getB_id() {
		return b_id;
	}

	public void setB_id(String b_id) {
		this.b_id = b_id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getYear() {
		return year;
	}

	public void setYear(String year) {
		this.year = year;
	}

	public String getPublication() {
		return publication;
	}

	public void setPublication(String publication) {
		this.publication = publication;
	}

	public String getShelfNo() {
		return shelfNo;
	}

	public void setShelfNo(String shelfNo) {
		this.shelfNo = shelfNo;
	}


	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public String getLanguage() {
		return language;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	public String getAuthor1() {
		return author1;
	}

	public void setAuthor1(String author1) {
		this.author1 = author1;
	}

	public String getAuthor2() {
		return author2;
	}

	public void setAuthor2(String author2) {
		this.author2 = author2;
	}

	public String getAuthor3() {
		return author3;
	}

	public void setAuthor3(String author3) {
		this.author3 = author3;
	}

	public SessionMap<String, Object> getSessionMap() {
		return sessionMap;
	}

	public void setSessionMap(SessionMap<String, Object> sessionMap) {
		this.sessionMap = sessionMap;
	}
	
	
	
	

}
